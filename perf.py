def aes_bitslice_cost(nshares):
    return 3280*pow(nshares, 2) + 14075*nshares + 12192

def keccak_cost(nshares): 
    return nshares*9242 + 24*25*2 * (18*pow(nshares, 2) - 3)

def isw_mult_cost(nshares):
    if nshares == 1:
        return 5
    else:
        return 33.5*pow(nshares, 2) - 0.5*nshares

def refresh_cost(nshares):
    if nshares == 1:
        return 0
    else:
        return 2.5*pow(nshares, 2) + 2.5*nshares - 7
    #return 7.5*pow(shares, 2) + 1.5*shares - 7

def m4_perf():
    aes = {}
    keccak = {}
    isw_mult = {}
    refresh = {}
    for nshares in range(1, 33):
        aes[nshares] = aes_bitslice_cost(nshares)
        keccak[nshares] = keccak_cost(nshares)
        isw_mult[nshares] = isw_mult_cost(nshares)
        refresh[nshares] = refresh_cost(nshares)
    return keccak, aes, isw_mult, refresh

def laptop_perf():
    keccak_perf = {
        0:2365, 
        1:6234, 
        2:10291,
        3:20566,
        4:28565,
        8:85461,
        12:294725,
        16:496477,
        24:1240210,
        32:2106572
    }
    mult_gf256_perf = {
        0:96, 
        1:108, 
        2:186,
        3:277,
        4:406,
        8:1375,
        12:2847,
        16:5244,
        24:11450,
        32:20412
    }

def riscv_perf(accel=False):
    keccak = {
        #1:92800,
        1:57819,
        2:228066,
        3:447752, 
        4:886739, 
        5:1722623,
        6:2230602,
        7:3320231,
        8:3970735,
        9:5054365,
        10:6106248,
        11:7468930,
        12:8877188,
        13:10415310,
        14:11444845,
        15:13234054,
        16:16802379, 
        24:45771230,
        32:76723861
    }
    aes = {
        1:0,
        2:0, 
        3:0, 
        4:0, 
        5:0, 
        8:0, 
        12:0, 
        16:0, 
        24:0, 
        32:0
    }
    for i in range(0,32):
        aes[i] = 0
    # field multiplication over GF256
    pini_mult = {
        #1:58,
        1:23, # full table multiplication
        1:21,
        #1:30,
        #1:329,multiplication
        2:592,
        3:1031,
        4:1680,
        5:2365,
        6:3194,
        7:4345,
        8:5540,
        9:6909,
        10:8322,
        11:10057,
        12:11948,
        13:13901,
        14:16010,
        15:18441,
        16:20916,
        17:23565,
        18:26258,
        19:29273,
        20:32444,
        21:35677,
        22:39066,
        23:42777,
        24:46532,
        25:50461,
        26:54434,
        27:58729,
        28:63180,
        29:67693,
        30:72362,
        31:77353,
        32:82388,
    }
    refresh = {
        1:0,
        2:87,
        3:277,
        4:396,
        5:396,
        6:833,
        7:833,
        8:1128,
        9:1128,
        10:1185,
        11:1185,
        12:2116,
        13:2116,
        14:2173,
        15:2173,
        16:2820,
        17:2820,
        18:2877,
        19:2877,
        20:3048,
        21:3048,
        22:3105,
        23:3105,
        24:5024,
        25:5024,
        26:5081,
        27:5081,
        28:5252,
        29:5252,
        30:5309,
        31:5309,
        32:6660,
    }

    refresh64 = {
        1:0,
        2:103,
        3:318,
        4:515,
        5:515,
        6:1048,
        7:1048,
        8:1545,
        9:1545,
        10:1648,
        11:1648,
        12:2817,
        13:2817,
        14:2920,
        15:2920,
        16:4017,
        17:4017,
        18:4120,
        19:4120,
        20:4429,
        21:4429,
        22:4532,
        23:4532,
        24:6973,
        25:6973,
        26:7076,
        27:7076,
        28:7385,
        29:7385,
        30:7488,
        31:7488,
        32:9785,
    }
    return keccak, aes, pini_mult, refresh64

# shake128 with 128 bit seed, index is the output length in bytes
table_prg_accel_128 = {
    1:1380,
    2:1446,
    3:1512,
    4:1462,
    5:1561,
    6:1627,
    7:1693,
    8:1528,
    9:1627,
    10:1695,
    11:1761,
    12:1596,
    13:1695,
    14:1761,
    15:1827,
    16:1662,
    17:1761,
    18:1827,
    19:1893,
    20:1728,
    21:1827,
    22:1893,
    23:1959,
    24:1794,
    25:1893,
    26:1959,
    27:2025,
    28:1860,
    29:1959,
    30:2025,
    31:2091,
    32:1926,
    33:2025,
    34:2091,
    35:2157,
    36:1808,
    37:1907,
    38:1973,
    39:2039,
    40:1874,
    41:1973,
    42:2039,
    43:2105,
    44:1940,
    45:2039,
    46:2105,
    47:2171,
    48:2006,
    49:2105,
    50:2171,
    51:2237,
    52:2072,
    53:2171,
    54:2237,
    55:2303,
    56:2138,
    57:2237,
    58:2303,
    59:2369,
    60:2204,
    61:2303,
    62:2369,
    63:2435,
    64:2270,
    65:2369,
    66:2435,
    67:2501,
    68:2336,
    69:2435,
    70:2501,
    71:2567,
    72:2201,
    73:2300,
    74:2366,
    75:2432,
    76:2267,
    77:2366,
    78:2432,
    79:2498,
    80:2333,
    81:2432,
    82:2498,
    83:2564,
    84:2399,
    85:2498,
    86:2564,
    87:2630,
    88:2465,
    89:2564,
    90:2630,
    91:2696,
    92:2531,
    93:2630,
    94:2696,
    95:2762,
    96:2597,
    97:2696,
    98:2762,
    99:2828,
    100:2663,
    101:2762,
    102:2828,
    103:2894,
    104:2729,
    105:2828,
    106:2894,
    107:2960,
    108:2594,
    109:2693,
    110:2759,
    111:2825,
    112:2660,
    113:2759,
    114:2825,
    115:2891,
    116:2726,
    117:2825,
    118:2891,
    119:2957,
    120:2792,
    121:2891,
    122:2957,
    123:3023,
    124:2858,
    125:2957,
    126:3023,
    127:3089,
    128:2924,
    129:3023,
    130:3089,
    131:3155,
    132:2990,
    133:3089,
    134:3155,
    135:3221,
    136:3056,
    137:3155,
    138:3221,
    139:3287,
    140:3122,
    141:3221,
    142:3287,
    143:3353,
    144:2987,
    145:3086,
    146:3152,
    147:3218,
    148:3053,
    149:3152,
    150:3218,
    151:3284,
    152:3119,
    153:3218,
    154:3284,
    155:3350,
    156:3185,
    157:3284,
    158:3350,
    159:3416,
    160:3251,
    161:3350,
    162:3416,
    163:3482,
    164:3317,
    165:3416,
    166:3482,
    167:3548,
    168:3383,
    169:3669,
    170:3735,
    171:3801,
    172:3751,
    173:3850,
    174:3916,
    175:3982,
    176:3817,
    177:3916,
    178:3982,
    179:4048,
    180:3883,
    181:3982,
    182:4048,
    183:4114,
    184:3949,
    185:4048,
    186:4114,
    187:4180,
    188:4015,
    189:4114,
    190:4180,
    191:4246,
    192:4081,
    193:4180,
    194:4246,
    195:4312,
    196:4147,
    197:4246,
    198:4312,
    199:4378,
    200:4213,
    201:4312,
    202:4378,
    203:4444,
    204:4095,
    205:4194,
    206:4260,
    207:4326,
    208:4161,
    209:4260,
    210:4326,
    211:4392,
    212:4227,
    213:4326,
    214:4392,
    215:4458,
    216:4293,
    217:4392,
    218:4458,
    219:4524,
    220:4359,
    221:4458,
    222:4524,
    223:4590,
    224:4425,
    225:4524,
    226:4590,
    227:4656,
    228:4491,
    229:4590,
    230:4656,
    231:4722,
    232:4557,
    233:4656,
    234:4722,
    235:4788,
    236:4623,
    237:4722,
    238:4788,
    239:4854,
    240:4488,
    241:4587,
    242:4653,
    243:4719,
    244:4554,
    245:4653,
    246:4719,
    247:4785,
    248:4620,
    249:4719,
    250:4785,
    251:4851,
    252:4686,
    253:4785,
    254:4851,
    255:4917
}

# sha3-256, index is the input length in bytes
table_hash_accel_128 = {
    1:1467,
    2:1486,
    3:1505,
    4:1524,
    5:1543,
    6:1562,
    7:1581,
    8:1600,
    9:1619,
    10:1638,
    11:1657,
    12:1676,
    13:1695,
    14:1714,
    15:1733,
    16:1752,
    17:1771,
    18:1790,
    19:1809,
    20:1828,
    21:1847,
    22:1866,
    23:1885,
    24:1904,
    25:1923,
    26:1942,
    27:1961,
    28:1980,
    29:1999,
    30:2018,
    31:2037,
    32:2056,
    33:2075,
    34:2094,
    35:2113,
    36:2132,
    37:2151,
    38:2170,
    39:2189,
    40:2208,
    41:2227,
    42:2246,
    43:2265,
    44:2284,
    45:2303,
    46:2322,
    47:2341,
    48:2360,
    49:2379,
    50:2398,
    51:2417,
    52:2436,
    53:2455,
    54:2474,
    55:2493,
    56:2512,
    57:2531,
    58:2550,
    59:2569,
    60:2588,
    61:2607,
    62:2626,
    63:2645,
    64:2664,
    65:2683,
    66:2702,
    67:2721,
    68:2740,
    69:2759,
    70:2778,
    71:2797,
    72:2816,
    73:2835,
    74:2854,
    75:2873,
    76:2892,
    77:2911,
    78:2930,
    79:2949,
    80:2968,
    81:2987,
    82:3006,
    83:3025,
    84:3044,
    85:3063,
    86:3082,
    87:3101,
    88:3120,
    89:3139,
    90:3158,
    91:3177,
    92:3196,
    93:3215,
    94:3234,
    95:3253,
    96:3272,
    97:3291,
    98:3310,
    99:3329,
    100:3348,
    101:3367,
    102:3386,
    103:3405,
    104:3424,
    105:3443,
    106:3462,
    107:3481,
    108:3500,
    109:3519,
    110:3538,
    111:3557,
    112:3576,
    113:3595,
    114:3614,
    115:3633,
    116:3652,
    117:3671,
    118:3690,
    119:3709,
    120:3728,
    121:3747,
    122:3766,
    123:3785,
    124:3804,
    125:3823,
    126:3842,
    127:3861,
    128:3880,
    129:3899,
    130:3918,
    131:3937,
    132:3956,
    133:3975,
    134:3994,
    135:4013,
    136:4068,
    137:4093,
    138:4112,
    139:4131,
    140:4150,
    141:4169,
    142:4188,
    143:4207,
    144:4226,
    145:4245,
    146:4264,
    147:4283,
    148:4302,
    149:4321,
    150:4340,
    151:4359,
    152:4378,
    153:4397,
    154:4416,
    155:4435,
    156:4454,
    157:4473,
    158:4492,
    159:4511,
    160:4530,
    161:4549,
    162:4568,
    163:4587,
    164:4606,
    165:4625,
    166:4644,
    167:4663,
    168:4682,
    169:4701,
    170:4720,
    171:4739,
    172:4758,
    173:4777,
    174:4796,
    175:4815,
    176:4834,
    177:4853,
    178:4872,
    179:4891,
    180:4910,
    181:4929,
    182:4948,
    183:4967,
    184:4986,
    185:5005,
    186:5024,
    187:5043,
    188:5062,
    189:5081,
    190:5100,
    191:5119,
    192:5138,
    193:5157,
    194:5176,
    195:5195,
    196:5214,
    197:5233,
    198:5252,
    199:5271,
    200:5290,
    201:5309,
    202:5328,
    203:5347,
    204:5366,
    205:5385,
    206:5404,
    207:5423,
    208:5442,
    209:5461,
    210:5480,
    211:5499,
    212:5518,
    213:5537,
    214:5556,
    215:5575,
    216:5594,
    217:5613,
    218:5632,
    219:5651,
    220:5670,
    221:5689,
    222:5708,
    223:5727,
    224:5746,
    225:5765,
    226:5784,
    227:5803,
    228:5822,
    229:5841,
    230:5860,
    231:5879,
    232:5898,
    233:5917,
    234:5936,
    235:5955,
    236:5974,
    237:5993,
    238:6012,
    239:6031,
    240:6050,
    241:6069,
    242:6088,
    243:6107,
    244:6126,
    245:6145,
    246:6164,
    247:6183,
    248:6202,
    249:6221,
    250:6240,
    251:6259,
    252:6278,
    253:6297,
    254:6316,
    255:6335
}

# The three following functions modelize the performance of the Keccak accelerator
# They are deduced from the analysis of the tables prg_accel_128 and hash_accel_128

def prg_accel_128(outlen):
    q = outlen // 168
    r = outlen % 168
    if r == 0 :
        return q*table_prg_accel_128[168]
    else:
        return q*table_prg_accel_128[168] + table_prg_accel_128[r]

def xof_accel_128(outlen):
    return prg_accel_128(outlen) + 300

def hash_accel_128(inlen):
    return 1467 + 19*(inlen-1) + ((inlen-1)//136)*36 + ((inlen-1)//137)*6

